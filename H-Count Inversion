 private static int mergesort(int []a , int low , int mid , int high){
        int left = low;
        int right = mid+1;
        int count=0;
        ArrayList<Integer> arr = new ArrayList<>();
        while(left<=mid && right<=high){
            if(a[left]<=a[right]){
                arr.add(a[left]);
                left++;
            }
            else{
                arr.add(a[right]);
                count = count + (mid-left+1);
                right++;
            }
        }
        while(left<=mid){
            arr.add(a[left]);
            left++;
        }
        while(right<=high){
            arr.add(a[right]);
            right++;
        }

        for(int i=low ; i<= high ; i++){
            a[i] = arr.get(i-low);
        }
        return count;
    }

    public static int merge(int []a , int low , int high){
        int count=0;
        if(low>=high) return count;
        int mid = (low+high)/2;
        count = count+merge(a , low , mid);
        count = count+merge(a , mid+1 , high);
        count = count+mergesort(a , low , mid , high);
        return count;
    }

    public static int numberOfInversions(int []a, int n) {
        return merge(a,0,n-1);
    }
